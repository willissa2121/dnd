{"version":3,"sources":["Dice.js","Users.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["diceVal","Dice","props","map","val","className","onClick","random","user","value","Users","id","Header","target","href","role","users","App","refreshFeed","axios","post","then","res","rollerArray","valArray","console","log","i","data","length","push","roller","setState","prevState","getRandom","a","randomVal","Math","floor","state","setInterval","this","iteration","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","rel","integrity","crossorigin","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61af1da2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst diceVal = [4, 6, 8, 10, 20];\r\n\r\nexport default function Dice(props) {\r\n  return (\r\n    <div>\r\n      {diceVal.map((val) => (\r\n        <button\r\n          className=\"btn btn-outline-success\"\r\n          onClick={() => {\r\n            props.random(val, props.user);\r\n          }}\r\n          value={val}\r\n        >\r\n          {val}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Dice from \"./Dice\";\r\nimport './Users.css'\r\n\r\nexport default function Users(props) {\r\n  return (\r\n    <div id=\"parent-user-group\">\r\n      <p>{props.user}</p>\r\n      <Dice className=\"user-group\" user={props.user} random={props.random}></Dice>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Header.css\"\r\nexport default function Header() {\r\n  return (\r\n    <div>\r\n      <div className=\"jumbotron\">\r\n        <h1 className=\"display-4\">DNDizzle shit tier dice roller</h1>\r\n        <p className=\"lead\">Ben Shapiro</p>\r\n\r\n        <p className=\"lead\">\r\n          <a target=\"_blank\" className=\"btn btn-primary btn-lg\" href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" role=\"button\">\r\n            Learn more\r\n          </a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./Users.js\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Users from \"./Users.js\";\nimport axios from \"axios\";\nimport schedule from \"node-schedule\";\nconst users = [\"Leeshin Liskyn\", \"Rone Dahl\", \"IWILLNUT\", \"HercuLATS\"];\nconst cont = true;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { valArray: [], rollerArray: [] };\n  }\n\n  componentDidMount(){\n    \n    setInterval(() => {\n      this.getRandom()\n    }, 5000);\n  }\n\n  refreshFeed = () => {\n    axios\n      .post(\"https://pure-mountain-12737.herokuapp.com/refreshData\")\n      .then((res) => {\n        let rollerArray = [];\n        let valArray = [];\n        console.log(res)\n        for (var i = res.data.length - 1; i >= 0; i--) {\n          rollerArray.push(res.data[i].roller);\n          valArray.push(res.data[i].val);\n        }\n        console.log(valArray, rollerArray);\n\n        this.setState((prevState) => ({\n          valArray,\n          rollerArray,\n        }));\n      });\n  };\n\n  getRandom = async (val = 0, roller = \"_\") => {\n    //const babyObj = { roller, randomVal };\n    let randomVal = Math.floor(Math.random() * val) + 1;\n    axios\n      .post(\"https://pure-mountain-12737.herokuapp.com/sendData\", {\n        val: randomVal,\n        roller,\n      })\n      .then((res) => {\n        let rollerArray = [];\n        let valArray = [];\n        for (var i = res.data.length - 1; i >= 0; i--) {\n          rollerArray.push(res.data[i].roller);\n          valArray.push(res.data[i].val);\n        }\n        console.log(valArray, rollerArray);\n\n        this.setState((prevState) => ({\n          valArray,\n          rollerArray,\n        }));\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <div className=\"container\">\n          <div id=\"contains-users\">\n            {users.map((user) => (\n              <Users random={this.getRandom} user={user}></Users>\n            ))}\n          </div>\n          <div>\n            {this.state.rollerArray.map((roller, iteration) => (\n              <div className=\"row justify-content-center\">\n                <p className=\"col-md-12\" id=\"roll-history\">\n                  <p id=\"rollVal\">{roller}: </p>\n                  <p id=\"rollRoller\"> {this.state.valArray[iteration]}</p>\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n      rel=\"stylesheet\"\n      integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n      crossorigin=\"anonymous\"\n    ></link>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}