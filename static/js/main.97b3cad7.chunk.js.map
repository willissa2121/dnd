{"version":3,"sources":["public/images sync /^/.*/.png$","public/images/cat.png","public/images/dragon.png","public/images/midget.png","public/images/necromancer.png","Dice.js","Users.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","diceVal","colorVal","Dice","props","val","iteration","className","onClick","random","user","value","Users","alt","src","require","image","Header","console","log","update","recentRoll","roller","users","userName","picture","App","refreshFeed","axios","post","then","res","rollerArray","valArray","i","data","length","push","currentState","state","setState","updateRoller","prevState","getRandom","a","randomVal","Math","floor","this","setInterval","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","href","rel","integrity","crossorigin","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97b3cad7.chunk.js","sourcesContent":["var map = {\n\t\"./cat.png\": 28,\n\t\"./dragon.png\": 29,\n\t\"./midget.png\": 30,\n\t\"./necromancer.png\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 27;","module.exports = __webpack_public_path__ + \"static/media/cat.46703135.png\";","module.exports = __webpack_public_path__ + \"static/media/dragon.19c2bc27.png\";","module.exports = __webpack_public_path__ + \"static/media/midget.e93a16f5.png\";","module.exports = __webpack_public_path__ + \"static/media/necromancer.ae6ce689.png\";","import React from \"react\";\r\n\r\nconst diceVal = [4, 6, 8, 10, 20];\r\nconst colorVal = [\"danger\", \"warning\", \"success\", \"primary\", \"info\"];\r\n\r\nexport default function Dice(props) {\r\n  return (\r\n    <div>\r\n      {diceVal.map((val, iteration) => (\r\n        <button\r\n          className={`btn btn-${colorVal[iteration]} mr-1 ml-1`}\r\n          onClick={() => {\r\n            props.random(val, props.user);\r\n          }}\r\n          value={val}\r\n        >\r\n          {val}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Dice from \"./Dice\";\r\nimport \"./Users.css\";\r\n\r\nexport default function Users(props) {\r\n  return (\r\n    <div>\r\n      <p>{props.user}</p>\r\n      <Dice\r\n        className=\"user-group\"\r\n        user={props.user}\r\n        random={props.random}\r\n      ></Dice>\r\n\r\n      <img alt=\"user-pic\"  id=\"parent-user-group\" src={require(`./public/images/${props.image}.png`)}/>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nexport default function Header(props) {\r\n  console.log(props)\r\n  if (props.update) {\r\n    return (\r\n      <div>\r\n        <div className=\"jumbotron\">\r\n          <h1 className=\"display-4\">DNDizzle shit tier dice roller</h1>\r\n          <p className=\"lead\">Most Recent Roll</p>\r\n          <p id=\"updateText\" className=\"display-5\">\r\n            {props.recentRoll.roller} rolled a {props.recentRoll.val}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div className=\"jumbotron\">\r\n          <h1 className=\"display-4\">DNDizzle shit tier dice roller</h1>\r\n          <p className=\"lead\">Most Recent Roll</p>\r\n          <p className=\"display-5\">\r\n            {props.recentRoll.roller} rolled a {props.recentRoll.val}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./Users.js\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Users from \"./Users.js\";\nimport axios from \"axios\";\nconst users = [\n  { userName: \"Leeshin Liskyn\", picture: \"dragon\" },\n  { userName: \"Rone Dahl\", picture: \"necromancer\" },\n  { userName: \"IWILLNUT\", picture: \"midget\" },\n  { userName: \"HercuLATS\", picture: \"cat\" },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      valArray: [],\n      rollerArray: [],\n      recentRoll: {},\n      updateRoller: true,\n    };\n  }\n\n  componentDidMount() {\n    this.refreshFeed();\n    setInterval(() => {\n      this.refreshFeed();\n    }, 1000);\n  }\n\n  refreshFeed = () => {\n    axios\n      .post(\"https://secure-sea-78493.herokuapp.com/refreshData\")\n      .then((res) => {\n        let rollerArray = [];\n        let valArray = [];\n        for (var i = res.data.length - 1; i >= 0; i--) {\n          if (res.data[i].roller === \"_\") {\n          } else {\n            rollerArray.push(res.data[i].roller);\n            valArray.push(res.data[i].val);\n          }\n        }\n        let recentRoll = { roller: rollerArray[0], val: valArray[0] };\n        let currentState = {\n          roller: this.state.recentRoll.roller,\n          val: this.state.recentRoll.val,\n        };\n\n        console.log(\n          currentState.roller === recentRoll.roller &&\n            currentState.val === recentRoll.val\n        );\n        if (\n          currentState.roller === recentRoll.roller &&\n          currentState.val === recentRoll.val\n        ) {\n          this.setState({ updateRoller: false });\n        } else {\n          this.setState({ updateRoller: true });\n        }\n\n        this.setState((prevState) => ({\n          valArray,\n          rollerArray,\n          recentRoll,\n        }));\n      });\n  };\n\n  getRandom = async (val = 0, roller = \"_\") => {\n    //const babyObj = { roller, randomVal };\n    let randomVal = Math.floor(Math.random() * val) + 1;\n    axios\n      .post(\"https://secure-sea-78493.herokuapp.com/sendData\", {\n        val: randomVal,\n        roller,\n      })\n      .then((res) => {\n        let rollerArray = [];\n        let valArray = [];\n        for (var i = res.data.length - 1; i >= 0; i--) {\n          if (res.data[i].roller === \"_\") {\n          } else {\n            rollerArray.push(res.data[i].roller);\n            valArray.push(res.data[i].val);\n          }\n        }\n        //let recentRoll = { roller: rollerArray[0], val: valArray[0] };\n\n        this.setState((prevState) => ({\n          valArray,\n          rollerArray,\n          //recentRoll,\n        }));\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          update={this.state.updateRoller}\n          recentRoll={this.state.recentRoll}\n        ></Header>\n        <div className=\"container-fluid\">\n          <div className=\"row\" id=\"contains-users\">\n            {users.map((user) => (\n              <div className=\"col-md-3\">\n                <Users\n                  random={this.getRandom}\n                  image={user.picture}\n                  user={user.userName}\n                ></Users>\n              </div>\n            ))}\n          </div>\n          <div>\n            {this.state.rollerArray.map((roller, iteration) => (\n              <div className=\"row justify-content-center\">\n                <p className=\"col-md-12\" id=\"roll-history\">\n                  <p id=\"rollVal\">{roller}: </p>\n                  <p id=\"rollRoller\"> {this.state.valArray[iteration]}</p>\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n      rel=\"stylesheet\"\n      integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n      crossorigin=\"anonymous\"\n    ></link>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}