{"version":3,"sources":["public/images sync /^/.*/.png$","public/images/cat.png","public/images/dragon.png","public/images/midget.png","public/images/necromancer.png","Dice.js","Users.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","diceVal","colorVal","Dice","props","val","iteration","className","onClick","random","user","value","Users","userDataArray","data","roller","createdAt","push","alt","src","require","image","Header","classID","update","recentRoll","users","userName","picture","App","handleData","res","saveRecent","rollDataArray","i","length","currentEntryObject","state","setState","updateRoller","prevState","refreshFeed","axios","post","then","getRandom","a","randomVal","Math","floor","valArray","rollerArray","this","setInterval","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","href","rel","integrity","crossorigin","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1362206.chunk.js","sourcesContent":["var map = {\n\t\"./cat.png\": 28,\n\t\"./dragon.png\": 29,\n\t\"./midget.png\": 30,\n\t\"./necromancer.png\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 27;","module.exports = __webpack_public_path__ + \"static/media/cat.46703135.png\";","module.exports = __webpack_public_path__ + \"static/media/dragon.19c2bc27.png\";","module.exports = __webpack_public_path__ + \"static/media/midget.e93a16f5.png\";","module.exports = __webpack_public_path__ + \"static/media/necromancer.ae6ce689.png\";","import React from \"react\";\r\n\r\nconst diceVal = [4, 6, 8, 10, 20];\r\nconst colorVal = [\"danger\", \"warning\", \"success\", \"primary\", \"info\"];\r\n\r\nexport default function Dice(props) {\r\n  return (\r\n    <div>\r\n      {diceVal.map((val, iteration) => (\r\n        <button\r\n          className={`btn btn-${colorVal[iteration]} mr-1 ml-1`}\r\n          onClick={() => {\r\n            props.random(val, props.user);\r\n          }}\r\n          value={val}\r\n        >\r\n          {val}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Dice from \"./Dice\";\r\nimport \"./Users.css\";\r\n\r\nexport default function Users(props) {\r\n  const userDataArray = [];\r\n  props.data.map((data) => {\r\n    if (props.user === data.roller) {\r\n      const { roller, val, createdAt } = data;\r\n      userDataArray.push({ roller, val, createdAt });\r\n    }\r\n  });\r\n  return (\r\n    <div>\r\n      <p>{props.user}</p>\r\n      <Dice\r\n        className=\"user-group\"\r\n        user={props.user}\r\n        random={props.random}\r\n      ></Dice>\r\n\r\n      <img\r\n        alt=\"user-pic\"\r\n        id=\"parent-user-group\"\r\n        src={require(`./public/images/${props.image}.png`)}\r\n      />\r\n      {userDataArray.map((data) => (\r\n        <div className=\"row justify-content-center\">\r\n          <p className=\"col-md-12\" id=\"roll-history\">\r\n            <p id=\"rollVal\">{data.roller}: </p>\r\n            <p id=\"rollRoller\"> {data.val}</p>\r\n          </p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nexport default function Header(props) {\r\n  const classID = props.update ? \"updateText\" : \"\";\r\n  return (\r\n    <div>\r\n      <div className=\"jumbotron\">\r\n        <h2 className=\"lead\">Most Recent Roll</h2>\r\n        <p id={classID} className=\"display-4\">\r\n          {props.recentRoll.roller} rolled a {props.recentRoll.val}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./Users.js\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Users from \"./Users.js\";\nimport axios from \"axios\";\nconst users = [\n  { userName: \"Leeshin Liskyn\", picture: \"dragon\" },\n  { userName: \"Rone Dahl\", picture: \"necromancer\" },\n  { userName: \"IWILLNUT\", picture: \"midget\" },\n  { userName: \"HercuLATS\", picture: \"cat\" },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rollDataArray: [],\n      valArray: [],\n      rollerArray: [],\n      recentRoll: {},\n      updateRoller: true,\n    };\n  }\n\n  componentDidMount() {\n    this.refreshFeed();\n    setInterval(() => {\n      this.refreshFeed();\n    }, 500);\n  }\n\n  handleData = (res, saveRecent) => {\n    let rollDataArray = [];\n    for (var i = res.data.length - 1; i >= 0; i--) {\n      const { roller, val, createdAt } = res.data[i];\n      let currentEntryObject = {\n        roller,\n        val,\n        createdAt,\n      };\n      rollDataArray.push(currentEntryObject);\n    }\n    const { roller, val, createdAt } = rollDataArray[0];\n    let recentRoll = {\n      roller,\n      val,\n      createdAt,\n    };\n\n    if (recentRoll.createdAt === this.state.recentRoll.createdAt) {\n      this.setState({ updateRoller: false });\n    } else {\n      this.setState({ updateRoller: true });\n    }\n    if (saveRecent) {\n      this.setState((prevState) => ({\n        rollDataArray,\n        recentRoll,\n      }));\n    } else {\n      this.setState((prevState) => ({\n        rollDataArray,\n      }));\n    }\n  };\n\n  refreshFeed = () => {\n    axios\n      .post(\"https://secure-sea-78493.herokuapp.com/refreshData\")\n      .then((res) => {\n        this.handleData(res, true);\n      });\n  };\n\n  getRandom = async (val, roller) => {\n    let randomVal = Math.floor(Math.random() * val) + 1;\n    axios\n      .post(\"https://secure-sea-78493.herokuapp.com/sendData\", {\n        val: randomVal,\n        roller,\n      })\n      .then((res) => {\n        this.handleData(res, false);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          update={this.state.updateRoller}\n          recentRoll={this.state.recentRoll}\n        ></Header>\n        <div className=\"container-fluid\">\n          <div className=\"row\" id=\"contains-users\">\n            {users.map((user) => (\n              <div className=\"col-md-3\">\n                <Users\n                  data={this.state.rollDataArray}\n                  random={this.getRandom}\n                  image={user.picture}\n                  user={user.userName}\n                ></Users>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\"\n      rel=\"stylesheet\"\n      integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\"\n      crossorigin=\"anonymous\"\n    ></link>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}